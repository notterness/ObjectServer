package com.oracle.athena.webserver.testio;

import com.oracle.athena.webserver.buffermgr.BufferManager;
import com.oracle.athena.webserver.buffermgr.BufferManagerPointer;
import com.oracle.athena.webserver.manual.WebServerTest;
import com.oracle.athena.webserver.niosockets.IoInterface;
import com.oracle.athena.webserver.operations.Operation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;

public class TestIoGenerator implements IoInterface {

    private static final Logger LOG = LoggerFactory.getLogger(TestIoGenerator.class);

    private final WebServerTest webServerTest;

    private BufferManager readBufferManager;
    private BufferManagerPointer readPointer;

    private BufferManager writeBufferManager;
    private BufferManagerPointer writePointer;

    /*
     ** This is the Operation to call the event() handler on if there is an error that the test client
     **   wants to inject into the system.
     */
    private Operation socketErrorHandler;

    /*
    ** For this TestIoGenerator, the data for the client read is generated by the test that is being run.
     */
    public TestIoGenerator(final WebServerTest webServerTest) {
        this.webServerTest = webServerTest;
    }

    /*
     ** This is the actual method to call to start all of the processing threads for a TCP port. The SocketChannel
     **   is assigned as part of the startClient() method to allow the NioSocket objects to be allocated out of a
     **   pool if so desired.
     */
    public void startClient(final SocketChannel socket, final Operation errorHandler) {
    }

    public void startClient(final String readFileName, final Operation errorHandler) {
        /*
         ** This is not used for the NIO based I/O
         */
    }

    /*
     ** The startInitiator() call is used to open up a connection to (at least initially) write data out of. This
     **   requires opening a connection and attaching it to a remote listener.
     */
    public boolean startInitiator(final InetAddress targetAddress, final int targetPort, final Operation errorHandler) {
        /*
         ** Not used
         */

        return true;
    }

    /*
     ** The following startInitiator() is not used for the NIO I/O
     */
    public boolean startInitiator(final String writeFileName, final Operation errorHandler) {
        /*
         ** Not used
         */
        return true;
    }

    /*
     ** The following is used to register with the NIO handling layer for reads. When a server connection is made, this
     **   registration is used to know where to pass the information from the socket.
     */
    public void registerReadBufferManager(final BufferManager readBufferMgr, final BufferManagerPointer readPtr) {

        this.readBufferManager = readBufferMgr;
        this.readPointer = readPtr;
    }

    public void registerWriteBufferManager(final BufferManager writeBufferMgr, final BufferManagerPointer writePtr) {

        this.writeBufferManager = writeBufferMgr;
        this.writePointer = writePtr;
    }

    public void unregisterReadBufferManager() {

        this.readBufferManager = null;
        this.readPointer = null;
    }

    public void unregisterWriteBufferManager() {

        this.writeBufferManager = null;
        this.writePointer = null;
    }

    /*
     ** This is called when there is a buffer in the BufferManager that is ready to accept data from
     **   the test client
     */
    public void readBufferAvailable() {
        ByteBuffer readFillBuffer = readBufferManager.peek(readPointer);
        if (readFillBuffer != null) {
            LOG.info("readBufferAvailable");
            webServerTest.read(readFillBuffer);

            /*
             ** Now that the HTTP Request is in the buffer, update the read pointer
             */
            readBufferManager.updateProducerWritePointer(readPointer);
        }
    }

    /*
     ** This is called when there is a buffer in the BufferManager with data that is ready to be written out
     **   to the test client
     */
    public void writeBufferReady() {

    }


    /*
     */
    public void closeConnection() {

    }

    /*
     ** Accessor method to call the Operation that is setup to handle when there is an error on
     **   the SocketChannel.
     */
    public void sendErrorEvent() {
        socketErrorHandler.event();
    }

}
