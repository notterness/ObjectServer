package com.oracle.pic.casper.webserver.api.model;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableMap;
import com.oracle.pic.casper.common.model.ArchivalState;
import com.oracle.pic.casper.webserver.api.common.Checksum;

import javax.annotation.Nullable;
import java.util.Date;
import java.util.Map;
import java.util.Objects;
import java.util.UUID;
import java.util.Optional;

/**
 * Metadata about an object stored in Casper.
 *
 * This includes the following metadata:
 *
 *  - The namespace in which the object is stored.
 *  - The name of the bucket in which the object is stored.
 *  - The name of the object.
 *  - The total size (in bytes) of the object.
 *  - The checksum of the object.
 *  - The user-defined metadata for the object.
 *  - The creation time of the object (the first time it was ever created).
 *  - The modification time of the object (the last time it was overwritten).
 *  - An entity tag for the object, which may be generated by this object (if none is provided).
 *
 * Equality of ObjectMetadata instances is determined using only the namespace, bucket, object name and entity tag.
 *
 * Instances of this class are immutable and thread-safe.
 */
public class ObjectMetadata {

    // Some values, such as HTTP Content headers are stored along with the user metadata (and subject to the same size
    // restrictions.   Those keys are prefixed with the following character, which may not be included in regular
    // attribute names (will cause an error).
    public static final String EXTENDED_USER_DATA_KEY_PREFIX = "@";

    private final String namespace;
    private final String bucketName;
    private final String objectName;

    private final long sizeInBytes;
    private final Checksum checksum;
    private final Map<String, String> metadata;
    private final Date creationTime;
    private final Date modificationTime;
    private final Date archivedTime;
    private final Date restoredTime;
    private final String etag;
    private final ArchivalState archivalState;

    /**
     * Constructor
     *  @param namespace the name of the namespace in which this object is stored (or will be stored).
     * @param bucketName the name of the bucket in which this object is stored (or will be stored).
     * @param objectName the name of the object.
     * @param sizeInBytes the total size in bytes, must be >= 0.
     * @param checksum the checksum of the data, may be null.
     * @param metadata the user defined metadata for the object, which may be empty (but must be non-null).
     * @param creationTime the time at which the object was initially created.
     * @param modificationTime the time at which the object was most recently modified (overwritten).
     * @param etag the entity tag for this instance of the object. If this is a null an entity tag is generated using
*             a random UUID.
     */
    public ObjectMetadata(String namespace, String bucketName, String objectName, long sizeInBytes,
                          @Nullable Checksum checksum, Map<String, String> metadata, Date creationTime,
                          Date modificationTime,
                          @Nullable String etag,
                          @Nullable Date archivedTime, @Nullable Date restoredTime,
                          ArchivalState archivalState) {
        Preconditions.checkArgument(sizeInBytes >= 0);
        this.namespace = Preconditions.checkNotNull(namespace);
        this.bucketName = Preconditions.checkNotNull(bucketName);
        this.objectName = Preconditions.checkNotNull(objectName);
        this.sizeInBytes = sizeInBytes;
        this.checksum = checksum;
        this.metadata = ImmutableMap.copyOf(Preconditions.checkNotNull(metadata));
        this.modificationTime = new Date(modificationTime.getTime());
        this.archivedTime = archivedTime != null ? new Date(archivedTime.getTime()) : null;
        this.restoredTime = restoredTime != null ? new Date(restoredTime.getTime()) : null;
        this.creationTime = new Date(creationTime.getTime());
        if (etag == null) {
            this.etag = UUID.randomUUID().toString();
        } else {
            this.etag = etag;
        }
        this.archivalState = archivalState;
    }

    public String getNamespace() {
        return namespace;
    }

    public String getBucketName() {
        return bucketName;
    }

    public String getObjectName() {
        return objectName;
    }

    public long getSizeInBytes() {
        return sizeInBytes;
    }

    @Nullable
    public Checksum getChecksum() {
        return checksum;
    }

    public Map<String, String> getMetadata() {
        return metadata;
    }

    public Date getCreationTime() {
        return new Date(creationTime.getTime());
    }

    public Date getModificationTime() {
        return new Date(modificationTime.getTime());
    }

    public Optional<Date> getArchivedTime() {
        return Optional.ofNullable(archivedTime);
    }

    public Optional<Date> getRestoredTime() {
        return Optional.ofNullable(restoredTime);
    }

    public ArchivalState getArchivalState() {
        return archivalState;
    }

    public String getETag() {
        return etag;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ObjectMetadata that = (ObjectMetadata) o;
        return Objects.equals(getNamespace(), that.getNamespace()) &&
                Objects.equals(getBucketName(), that.getBucketName()) &&
                Objects.equals(getObjectName(), that.getObjectName()) &&
                Objects.equals(getETag(), that.getETag());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getNamespace(), getBucketName(), getObjectName(), getETag());
    }

    @Override
    public String toString() {
        return "ObjectMetadata{" +
                "namespace='" + namespace + '\'' +
                ", bucketName='" + bucketName + '\'' +
                ", objectName='" + objectName + '\'' +
                ", sizeInBytes=" + sizeInBytes +
                ", checksum='" + checksum + '\'' +
                ", metadata=" + metadata +
                ", creationTime=" + creationTime +
                ", modificationTime=" + modificationTime +
                ", archivedTime=" + archivedTime +
                ", restoredTime=" + restoredTime +
                ", etag='" + etag + '\'' +
                ", archivalState='" + archivalState + '\'' +
                '}';
    }
}
