package com.oracle.pic.casper.webserver.auth.dataplane.model;

import com.fasterxml.jackson.databind.JsonNode;
import com.oracle.pic.identity.authentication.SCryptPasswordAuthenticator;

public final class SwiftHashPassword {

    private final String hashPassword;

    private SwiftHashPassword(String hashPassword) {
        this.hashPassword = hashPassword;
    }

    public String getHashPassword() {
        return hashPassword;
    }

    static SwiftHashPassword fromJSON(JsonNode jsonNode, String json) {
        if (jsonNode == null || !jsonNode.isObject()) {
            throw new AssertionError(
                    String.format("The Swift credentials JSON did not have an object in 'hashPasswords': %s", json));
        }

        // block size parameter
        JsonNode r = getNode(json, jsonNode, "r");
        // parallelization parameter
        JsonNode p = getNode(json, jsonNode, "p");
        // derived key length
        JsonNode dkLen = getNode(json, jsonNode, "dkLen");
        // salt
        JsonNode salt = getNode(json, jsonNode, "salt");
        // CPU/memory cost parameter
        JsonNode n = getNode(json, jsonNode, "n");
        // Derived key generated by scrypt based on the above parameters and plain text password. Swift password
        // will be validated against this after generating derived key from it.
        JsonNode hash = getNode(json, jsonNode, "hash");

        // SCryptPasswordAuthenticator.validate expects the stored password in the following format:
        // SC$N$r$p$dkLen$base64(salt)$base64(hash-of-password). This is represented by the format
        //SCryptPasswordAuthenticator.PASSWORD_FORMAT.
        String hashPassword = String.format(SCryptPasswordAuthenticator.PASSWORD_FORMAT,
                SCryptPasswordAuthenticator.ALGORITHM_NAME,
                n.asInt(), r.asInt(), p.asInt(), dkLen.asInt(), salt.asText(), hash.asText());

        return new SwiftHashPassword(hashPassword);
    }

    private static JsonNode getNode(String json, JsonNode jsonNode, String field) {
        final JsonNode f = jsonNode.get(field);
        if (f == null || !f.isValueNode()) {
            throw new AssertionError(String.format(
                    "The Swift credentials JSON did not have a '%s' field or it was not a value node  " +
                            "in 'hashPasswords': %s", field, json));
        }
        return f;
    }
}
